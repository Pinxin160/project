import pygame
import random

# 初始化 Pygame
pygame.init()

# 遊戲參數
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
CELL_SIZE = 20
SNAKE_COLOR = (0, 255, 0)
FOOD_COLOR = (255, 0, 0)
BG_COLOR = (0, 0, 0)
FPS = 10

# 遊戲畫面初始化
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("貪吃蛇")
clock = pygame.time.Clock()

# 遊戲初始化
snake = [(100, 100), (90, 100), (80, 100)]  # 初始蛇身
snake_direction = "RIGHT"
food_position = (random.randint(0, (SCREEN_WIDTH // CELL_SIZE) - 1) * CELL_SIZE,
                 random.randint(0, (SCREEN_HEIGHT // CELL_SIZE) - 1) * CELL_SIZE)
score = 0
speed_increase_threshold = 5  # 吃 5 個食物後速度提升

# 分數顯示
font = pygame.font.SysFont("arial", 25)

# 歷史最高分數紀錄
def get_high_score():
    try:
        with open("high_score.txt", "r") as file:
            return int(file.read())
    except FileNotFoundError:
        return 0

def save_high_score(new_score):
    with open("high_score.txt", "w") as file:
        file.write(str(new_score))

high_score = get_high_score()

# 遊戲結束檢查
def is_collision(position):
    x, y = position
    return (
        x < 0 or x >= SCREEN_WIDTH or
        y < 0 or y >= SCREEN_HEIGHT or
        position in snake[1:]
    )

# 遊戲邏輯更新
def update_snake():
    global food_position, score, snake_direction, FPS
    # 新蛇頭位置
    head_x, head_y = snake[0]
    if snake_direction == "UP":
        new_head = (head_x, head_y - CELL_SIZE)
    elif snake_direction == "DOWN":
        new_head = (head_x, head_y + CELL_SIZE)
    elif snake_direction == "LEFT":
        new_head = (head_x - CELL_SIZE, head_y)
    elif snake_direction == "RIGHT":
        new_head = (head_x + CELL_SIZE, head_y)
    
    # 加入新蛇頭
    snake.insert(0, new_head)

    # 如果吃到食物
    if new_head == food_position:
        score += 10
        food_position = (random.randint(0, (SCREEN_WIDTH // CELL_SIZE) - 1) * CELL_SIZE,
                         random.randint(0, (SCREEN_HEIGHT // CELL_SIZE) - 1) * CELL_SIZE)
        # 提升速度
        if score // 50 > (score - 10) // 50:
            FPS += 1
    else:
        # 吃不到食物，移除蛇尾
        snake.pop()

# 主遊戲迴圈
running = True
while running:
    screen.fill(BG_COLOR)

    # 事件處理
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_UP and snake_direction != "DOWN":
                snake_direction = "UP"
            elif event.key == pygame.K_DOWN and snake_direction != "UP":
                snake_direction = "DOWN"
            elif event.key == pygame.K_LEFT and snake_direction != "RIGHT":
                snake_direction = "LEFT"
            elif event.key == pygame.K_RIGHT and snake_direction != "LEFT":
                snake_direction = "RIGHT"

    # 更新蛇的狀態
    update_snake()

    # 檢查遊戲結束
    if is_collision(snake[0]):
        if score > high_score:
            save_high_score(score)
        break

    # 繪製蛇
    for segment in snake:
        pygame.draw.rect(screen, SNAKE_COLOR, pygame.Rect(segment[0], segment[1], CELL_SIZE, CELL_SIZE))
    
    # 繪製食物
    pygame.draw.rect(screen, FOOD_COLOR, pygame.Rect(food_position[0], food_position[1], CELL_SIZE, CELL_SIZE))

    # 繪製分數
    score_text = font.render(f"Score: {score}  High Score: {high_score}", True, (255, 255, 255))
    screen.blit(score_text, (10, 10))

    # 更新畫面
    pygame.display.flip()
    clock.tick(FPS)

pygame.quit()
